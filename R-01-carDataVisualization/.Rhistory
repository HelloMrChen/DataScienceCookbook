qqline(x$x2)
#散点图的进阶
plot(x$x1,x$x2,main = "数学和线性代数的关系")
#散点图的进阶
plot(x$x1,x$x2,main = "数学和线性代数的关系",xlab = "数学分析",ylab = "线性代数")
#散点图的进阶
plot(x$x1,x$x2,main = "数学和线性代数的关系",xlab = "数学分析",ylab = "线性代数",
xlim = c(1:100),ylim = c(1:100)
)
#散点图的进阶
plot(x$x1,x$x2,main = "数学和线性代数的关系",xlab = "数学分析",ylab = "线性代数",
xlim = c(1,100),ylim = c(1,100)
)
#散点图的进阶
plot(x$x1,x$x2,main = "数学和线性代数的关系",xlab = "数学分析",ylab = "线性代数",
xlim = c(50,100),ylim = c(50,100)
)
#散点图的进阶
plot(x$x1,x$x2,main = "数学和线性代数的关系",xlab = "数学分析",ylab = "线性代数",
xlim = c(50,100),ylim = c(50,100),
col="red "
)
#散点图的进阶
plot(x$x1,x$x2,main = "数学和线性代数的关系",xlab = "数学分析",ylab = "线性代数",
xlim = c(50,100),ylim = c(50,100),
col="red",pch=19
)
#散点图的进阶
plot(x$x1,x$x2,main = "数学和线性代数的关系",xlab = "数学分析",ylab = "线性代数",
xlim = c(50,100),ylim = c(50,100),
xaxs="i",yaxs="i",
col="red",pch=19
)
#散点图的进阶
plot(x$x1,x$x2,main = "数学和线性代数的关系",xlab = "数学分析",ylab = "线性代数",
xlim = c(50,100),ylim = c(50,100),
xaxs="i",yaxs="i",
col="red",pch=18
)
data()
heatmap(as.matrix(mtcars))
heatmap(as.matrix(mtcars),Rowv = na)
heatmap(as.matrix(mtcars),Rowv = NA)
heatmap(as.matrix(mtcars),Rowv = NA,Colv = NA)
heatmap(as.matrix(mtcars),Rowv = NA,Colv = NA,col=heat.colors(256)
heatmap(as.matrix(mtcars),Rowv = NA,Colv = NA,col=heat.colors(256))
heatmap(as.matrix(mtcars),Rowv = NA,Colv = NA,col=heat.colors(256))
heatmap(as.matrix(mtcars),Rowv = NA,Colv = NA,col=heat.colors(256),scale = "column")
heatmap(as.matrix(mtcars),Rowv = NA,Colv = NA,col=heat.colors(256),scale = "column",margins = c(2,8))
heatmap(as.matrix(mtcars),Rowv = NA,Colv = NA,col=heat.colors(256),scale = "column",
margins = c(2,8)，mian="cars")
heatmap(as.matrix(mtcars),Rowv = NA,Colv = NA,col=heat.colors(256),scale = "column",
margins = c(2,8),mian="cars")
heatmap(as.matrix(mtcars),Rowv = NA,Colv = NA,col=heat.colors(256),scale = "column",
margins = c(2,8),main="cars")
iris[,3:4]
iris
iris[,3:4]
iris
#向日葵散点图
sunflowerplot(iris[,3:4],col = "gold")
#向日葵散点图
sunflowerplot(iris[,3:4])
sunflowerplot(iris[,3:4])
#向日葵散点图
sunflowerplot(iris[,3:4],col = "gold",seg.col = "gold")
#向日葵散点图
sunflowerplot(iris[3:4],col = "gold",seg.col = "gold") #对数据集的
iris[3:4]
#散点图集
plot(iris[,1:4])
#散点图集
plot(iris[1:4])
#散点图集
plot(iris[1:4]);pairs(iris[1:4])
plot(iris[1:4],pch=19,col="blue")
plot(iris[1:4],pch=19,col="blue",cex=0.9)
sunflowerplot(iris[1:4],col = "gold",seg.col = "gold") #对数据集的第三列和第四列画图，重叠的部分用延伸的线来表示
plot(iris[1:4],pch=19,col="blue",cex=0.9);pairs(iris[1:4])
plot(iris[1:4],pch=19,col="blue",cex=0.9);
#par 函数将作图区域分割
par(mflow=c(3:1))
#par 函数将作图区域分割
par(mfrow=c(3:1))
#par 函数将作图区域分割
par(mfrow=c(3,1))
plot(iris[1:4],pch=19,col="blue",cex=0.9);pairs(iris[1:4])
#par 函数将作图区域分割
par(mfrow=c(3,1))
plot(iris[1:4],pch=19,col="blue",cex=0.9);pairs(iris[1:4])
plot(x1,x2)
plot(x1,x2);plot(x2,x3)
plot(x1,x2);plot(x2,x3);plot(x1,x3)
plot(x1,x2,main = "1");plot(x2,x3,main = "1");plot(x1,x3,main = "1")
plot(x1,x2,main = "1");plot(x2,x3,main = "2");plot(x1,x3,main = "2")
plot(x1,x2,main = "1");plot(x2,x3,main = "2");plot(x1,x3,main = "3")
color()
colors()
dev()
dev.cur()
dev.new()
scatterplot3d(x[2:4])
install.packages("scatterplot3d")
scatterplot3d(x[2:4])
library(scatterplot3d)
#地图
Map("state",interior=fasle)
#地图
map("state",interior=fasle)
install.packages("maps")
library(maps)
map("state",interior=fasle)
map("state",interior=FALSE)
map("state",interior=FALSE,col = "red ")
map("world",interior=FALSE,col = "red ")
map("world",interior=FALSE,col = "red ")
map("state",interior=FALSE,col = "red ")
map("china",interior=FALSE,col = "red ")
map("world",interior=FALSE,col = "red ")
map("world")
map("states")
map("state")
li=iris
li
cor(li[1],li[2])
plot(li[1],li[2])
plot(li[2],li[3])
li
li[1];li[2]
plot(li[1],li[2])
li=iris(which(iris$Species=="setosa"),1:2)
li=iris[which(iris$Species=="setosa"),1:2]
li
plot(li)
#相关系数
cor(li)
#相关系数
cor(li[1],li[2])
#相关系数显著性检验
cor.test(li[1],li[2])
li[1]
#相关系数显著性检验
cor.test(li$Sepal.Length,li$Sepal.Width)
li$Sepal.Length
is.vector(li$Sepal.Length)
is.vector(li[1])
mode(li[1])
mode(li$Sepal.Length)
swiss
views(swiss)
view(swiss)
View(swiss)
s=lm(Ftertility~.,data = swiss)
s=lm(Fertility~.,data = swiss)
s
summary(s)
heat.colors(5)
install.packages("RColorBrewer")
library(RColorBrewer)
display.brewer.all()
brewer.pal(7,"RlOrRd")
brewer.pal(7,"YlOrRd")
display.brewer.pal(7,"YlOrRd")
par(bg="gray")
plot(norm(100))
plot(rnorm(100))
box(which = "plot")
box(which = "figure")
box(which = "Outer")
box(which = "Figure")
box(which = "figure")
x=rnorm(100)
shapiro.test(x)   看p值，如果太小则显著就不拒绝原假设，原假设为不符合正态分布
shapiro.test(x)   #看p值，如果太小则显著就不拒绝原假设，原假设为不符合正态分布
#正态性检验
x=rnorm(1000)
shapiro.test(x)   #看p值，如果太小则显著就不拒绝原假设，原假设为不符合正态分布
#正态性检验
x=rnorm(100000)
shapiro.test(x)   #看p值，如果太小则显著就不拒绝原假设，原假设为不符合正态分布
#正态性检验
x=rnorm(5000)
shapiro.test(x)   #看p值，如果太小则显著就不拒绝原假设，原假设为不符合正态分布
install.packages("lattice")
library(lattice)
xyplot(mpg~disp)
xyplot(mpg~disp,data=mtcars)
xyplot(mpg~disp,data=mtcars,groups = cyl)
xyplot(mpg~disp,data=mtcars,groups = cyl,auto.key = list(corner=c(1,1)))
#ggplot 包是R语言中强大的画图包
library(ggplot2)
qplot(mpg,disp,data=mtcars)
qplot(mpg,disp,data=mtcars,col=as.factor(cyl))
qplot(mpg,disp,data=mtcars,size=as.factor(cyl))
qplot(mpg,disp,data=mtcars,size=as.factor(cyl),col=as.factor(mpg)
qplot(mpg,disp,data=mtcars,size=as.factor(cyl),col=as.factor(mpg))
qplot(mpg,disp,data=mtcars,size=as.factor(cyl),col=as.factor(cyl))
qplot(mpg,disp,data=mtcars,size=as.factor(cyl),col=as.factor(mpg))
#plot中的text()可以在plot图上进行标识文字
plot(mpg~disp,data=mtcars)
text(255,35,"nihao")
text(255,100,"nihao")
text(255,100,"nihao")
text(258,22,"nihao")
text(mtcars$mpg,mtcars$disp,"nihao")  #text函数跟line、point一样是低水平的作图工具
text(mtcars$mpg,mtcars$disp,"nihao")  #text函数跟line、point一样是低水平的作图工具
#plot中的text()可以在plot图上进行标识文字
plot(mpg~disp,data=mtcars)
text(mtcars$mpg,mtcars$disp,"nihao")  #text函数跟line、point一样是低水平的作图工具
text(mtcars$mpg,mtcars$disp,mtcars$carb)  #text函数跟line、point一样是低水平的作图工具
#arrows函数用来画出误差条
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,x1=mtcars$disp)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,x1=mtcars$disp,y1=mtcars$disp*0.95)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,x1=mtcars$disp,y1=mtcars$mpg*0.95)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,x1=mtcars$disp,y1=mtcars$mpg*0.95,angle = 90,code=3)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,x1=mtcars$disp,y1=mtcars$mpg*0.95,angle = 90,code=3,length = 0.04)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,x1=mtcars$disp,y1=mtcars$mpg*0.95,angle = 90,code=3,length = 0.04,lwd = 0.4)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,
x1=mtcars$disp,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.04,lwd = 0.4)
#arrows函数用来画出误差条
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,
x1=mtcars$disp,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.04,lwd = 0.4)
#arrows函数用来画出误差条
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,
x1=mtcars$disp,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.04,lwd = 0.4)
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,
x1=mtcars$disp,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.04,lwd = 0.4)
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$mpg*0.95,
x1=mtcars$disp,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.04,lwd = 0.4)
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$mpg*0.95,
x1=mtcars$disp*0.5,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.04,lwd = 0.4)
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$mpg*0.95,
x1=mtcars$disp*0.95,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.04,lwd = 0.4)
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$mpg*0.95,
x1=mtcars$disp,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.04,lwd = 0.4)
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$mpg*0.95,
x1=mtcars$disp*0.95,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.0
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$mpg*0.95,
x1=mtcars$disp*0.95,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.04,lwd = 0.4)
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$mpg*0.95,
x1=mtcars$disp*0.95,y1=mtcars$mpg*1.05,angle = 30,code=3,length = 0.04,lwd = 0.4)
qplot(mpg,disp,data=mtcars,col=as.factor(cyl))
qplot(mpg,disp,data=mtcars,size=as.factor(cyl),col=as.factor(mpg))
xyplot(mpg~disp,data=mtcars,groups = cyl,auto.key = list(corner=c(1,1)))
plot(mpg~disp,data=mtcars)
text(mtcars$mpg,mtcars$disp,mtcars$carb)  #text函数跟line、point一样是低水平的作图工具 通过这种方法可以将数据
x=rnorm(100)
x
plot(x,y)
y=rnorm(100)
plot(x,y)
x=rnorm(10000)
y=rnorm(10000)
plot(x,y)
plot(x,y)
x=rnorm(10000,col=2)
smoothScatter(x,y)
install.packages("plyr")
library(plyr)
install.packages("ggplot2")
install.packages("reshape2")
library(ggplot2)
library(reshape2)
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
install.packages("installr")
require(installr)#load/install + load installr
updateR()
install.packages("installr")
install.packages("installr")
require(installr)#load/install + load installr
updateR()
library(reshape2)
install.packages("plyr")
library(plyr)
install.packages("ggplot2")
install.packages("plyr")
install.packages("ggplot2")
install.packages("reshape2")
library(ggplot2)
library(reshape2)
setwd("/Users/gavinchen/我的文档/MBA养成记/2-自我提升/2-数据分析/程序练习/数据科学实战手册/R-01-carDataVisualization")
vehicles<-read.csv("/Data/vehicles.csv")
vehicles<-read.csv("Data/vehicles.csv")
View(vehicles)
head(vehicles)
head(vehicles)
head(vehicles)
View(vehicles)
#给csv中的变量贴上标签
labels<-read.table("varlabels.txt")
#给csv中的变量贴上标签
labels<-read.table("Data/varlabels.txt")
#给csv中的变量贴上标签
labels<-read.table("Data/varlabels.txt",sep = "-",header = FALSE)
labels<-do.call(rbind,strsplit(readlines("varlabels.txt"),"-"))
labels<-do.call(rbind,strsplit(readLines("varlabels.txt"),"-"))
labels<-do.call(rbind,strsplit(readLines("Data/varlabels.txt"),"-"))
view(vehicles)
View(vehicles)
labels<-do.call(rbind,strsplit(readLines("Data/varlabels.txt"),"-"))
labels<-do.call(rbind,strsplit(readLines("Data/varlabels.txt"),"-"))
#给csv中的变量贴上标签
labels<-read.table("Data/varlabels.txt",sep = "-",header = FALSE)
View(vehicles)
labels<-do.call(rbind,strsplit(readLines("Data/varlabels.txt"),"-"))
a=readLines("Data/varlabels.txt")
a=readLines("Data/varlabels.txt")
a=readLines("Data/varlabels.txt")
labels<-do.call(rbind,strsplit(readLines("Data/varlabels.txt"),"-"))
#给csv中的变量贴上标签
labels<-read.table("Data/varlabels.txt",sep = "-",header = FALSE)
a=readLines("Data/varlabels.txt")
a=readLines("Data/varlabels.txt")
a=readLines("Data/varlabels.txt")
a=readLines("Data/varlabels.txt")
a=readLines("Data/varlabels.txt")
a=readLines("Data/varlabels.txt")
help("readLines")
a=readLines("Data/varlabels.txt")
print a
a
a=readLines("Data/varlabels.txt")
a
y=strsplit(a,"-")
y
y=strsplit(a," - ")
y
labels<-do.call(rbind,strsplit(readLines("Data/varlabels.txt")," - "))
labels
View(labels)
#给csv中的变量贴上标签
#这里的空格很重要，防止无拆分连续的字符串，这用到了readline、strsplit、docall、rbind
labels<-do.call(rbind,strsplit(readLines("Data/varlabels.txt")," - "))
nrow(vehicles)
ncol(vehicles)
names(vehicles)
length(unique(vehicles["yeay"]))
length(unique(vehicles["year"]))
length(unique(vehicles[,"year"]))
vehicles[,"year"]
mode(vehicles)
View(vehicles)
min_year=min(vehicles[,"year"])
max_year=max(vehicles[,"year"])
min_year
max_year
vehicles[vehicles$year]
vehicles$year
length(unique(vehicles$year))
length(unique(vehicles[,"year"]))
table(vehicles$fuelType1)
labels
View(labels)
View(labels)
table(vehicles$fuelType1)
vehicles$trany(vehicles=="")<-NA
vehicles$trany(vehicles == "")<-NA
vehicles$trany[vehicles$trany==""]<-NA
vehicles$trany[vehicles$trany==""]<-NA  #筛选某列中特定的值并且将其赋为空值
vehicles$trany
length(vehicles$trany[vehicles$trany==NA])
length(vehicles$trany)
length(vehicles$trany[vehicles$trany==""]<-NA)
vehicles$trany
substr(vehicles$trany,1,4)
vehicle<-ifelse(substr(vehicles$trany,1,4))=="Auto","Auto","Manual")
vehicle$trany2<-ifelse(substr(vehicles$trany,1,4))=="Auto","Auto","Manual")
vehicle$trany2<-ifelse(substr(vehicles$trany,1,4)=="Auto","Auto","Manual")
vehicles$trany2<-ifelse(substr(vehicles$trany,1,4)=="Auto","Auto","Manual")
vehicles$trany2
vehicles$trany<-as.factor(vehicles$trany)
vehicles$trany2<-as.factor(vehicles$trany2)
table(vehicles$trany2)
with(vehicles,table(sCharger,year))
View(vehicles)
vehicles$sCharger
View(vehicles)
vehicles$sCharger
help(ddply)
help(ddply)
ddply(vehicles,~year,summarise,avgMPG=mean(comb08),avgHghy=mean(highway08),avgCity=mean(city08))
# install.packages("plyr")
library(plyr)
ddply(vehicles,~year,summarise,avgMPG=mean(comb08),avgHghy=mean(highway08),avgCity=mean(city08))
ddply(vehicles,year,summarise,avgMPG=mean(comb08),avgHghy=mean(highway08),avgCity=mean(city08))
ddply(vehicles,vehicles$year,summarise,avgMPG=mean(comb08),avgHghy=mean(highway08),avgCity=mean(city08))
ddply(vehicles,vehicles$year,summarise,avgMPG=mean(comb08),avgHghy=mean(highway08),avgCity=mean(city08))
ddply(vehicles,~year,summarise,avgMPG=mean(comb08),avgHghy=mean(highway08),avgCity=mean(city08))
ddply(vehicles,~year,avgMPG=mean(comb08),avgHghy=mean(highway08),avgCity=mean(city08))
ddply(vehicles,~year,summarise，avgMPG=mean(comb08),avgHghy=mean(highway08),avgCity=mean(city08))
ddply(vehicles,~year,summarise,avgMPG=mean(comb08),avgHghy=mean(highway08),avgCity=mean(city08))
#------数据准备及查看详情
summary(vehicles)
#ddply可以将数据集按照制定函数进行计算并且赋给新数据框
#参数1  数据集，2 分类变量
mpgByYr<-ddply(vehicles,~year,summarise,avgMPG=mean(comb08),avgHghy=mean(highway08),avgCity=mean(city08))
ggplot(mpgByYr,aes(year,avgMPG))+geom_point()+geom_smooth()+xlab("Year")+ylab("Average MPG")+ggtitle("ALL cars")
ggplot(mpgByYr,aes(year,avgMPG))+geom_point()+geom_smooth()+xlab("Year")+ylab("Average MPG")+ggtitle("All cars")
View(labels)
table(vehicles$fuelType1)
View(vehicles)
type(vehicles$fuelType2)
table(vehicles$fuelType2)
View(labels)
table(vehicles$fuelType1)
#ddply可以将数据集按照制定函数进行计算并且赋给新数据框
#参数1  数据集，2 分类变量
mpgByYr<-ddply(vehicles[vehicles$fuelType1=="Regular Gasoline"],~year,summarise,avgMPG=mean(comb08),avgHghy=mean(highway08),avgCity=mean(city08))
#ddply可以将数据集按照制定函数进行计算并且赋给新数据框
#参数1  数据集，2 分类变量
mpgByYr<-ddply(vehicles,~year,summarise,avgMPG=mean(comb08),avgHghy=mean(highway08),avgCity=mean(city08))
ggplot(mpgByYr,aes(year,avgMPG))+geom_point()+geom_smooth()+xlab("Year")+ylab("Average MPG")+ggtitle("All cars")
View(labels)
gasCars<-subset(vehicles,fuelType1 %in%c("Regular Gasoline","Premium Gasoline","midgrade Gasoline")&fuelType2==""&atvType!="Hybrid")
gasCars
View(gasCars)
table(gasCars)
ncol(gasCars)
nrow(gasCars)
nrow(vehicles)
table(gasCars$fuelType1)
nrow(gasCars);nrow(vehicles)
mpgByYr<-ddply(gasCars,~year,summarise,avgMPG=mean(comb08),avgHghy=mean(highway08),avgCity=mean(city08))
ggplot(mpgByYr,aes(year,avgMPG))+geom_point()+geom_smooth()+xlab("Year")+ylab("Average MPG")+ggtitle("All cars")
GascarmpgByYr<-ddply(gasCars,~year,summarise,avgMPG=mean(comb08),avgHghy=mean(highway08),avgCity=mean(city08))
ggplot(GascarmpgByYr,aes(year,avgMPG))+geom_point()+geom_smooth()+xlab("Year")+ylab("Average MPG")+ggtitle("All cars")
ggplot(GascarmpgByYr,aes(year,avgMPG))+geom_point()+xlab("Year")+ylab("Average MPG")+ggtitle("All cars")
geom_smooth()+
ggplot(GascarmpgByYr,aes(year,avgMPG))+geom_point()+geom_smooth()+xlab("Year")+ylab("Average MPG")+ggtitle("All cars")
GascarmpgByYr<-ddply(gasCars,~year,summarise,avgMPG=mean(comb08),avgHghy=mean(highway08),avgCity=mean(city08))
ggplot(GascarmpgByYr,aes(year,avgMPG))+geom_point()+geom_smooth()+xlab("Year")+ylab("Average MPG")+ggtitle("All cars")
#三、查看汽车引擎马力趋势
typeof(gasCars$displ)
gasCars$displ<-as.numeric(gasCars$displ)
#三、查看汽车引擎马力趋势
typeof(gasCars$displ)
ggplot(gasCars,aes(displ,comb08))+geom_point()+geom_smooth()
#四、查看近几年生产车型的趋势
avgCarSize<-ddply(gasCars,~year,summarise,avgDispl=mean(displ))
avgCarSize
ggplot(avgCarSize,aes(year,avgDispl))+xlab("year")+ylab("avgDispl")+geom_point()+geom_smooth()
#五、查看引擎排量和和MPG之间的关系
byYear<-ddply(gasCars,~year,avgMPG=mean(comb08),avgDispl<-mean(displ))
gasCars$displ
#五、查看引擎排量和和MPG之间的关系
byYear<-ddply(gasCars,~year,avgMPG=mean(comb08),avgDispl<-mean(gasCars$displ))
#五、查看引擎排量和和MPG之间的关系
byYear<-ddply(gasCars,~year,summarise,avgMPG=mean(comb08),avgDispl<-mean(gasCars$displ))
head(byYear)
#五、查看引擎排量和和MPG之间的关系
byYear<-ddply(gasCars,~year,summarise,avgMPG=mean(comb08),avgDispl<-mean(displ))
head(byYear)
byyear2=melt(byYear,id="year")
byyear2
levels(byyear2$variable)<-c("Average MPG","Avg engine displacement")
head(byyear2)
byyear2
byyear2=melt(byYear,id="year") #melt 函数？
byyear2
levels(byyear2$variable)<-c("Average MPG","Avg engine displacement")
byyear2
nrow(byyear2)
ggplot(byyear2,aes(year,value))+geom_point()+geom_smooth()+facet_wrap(~variable,ncol = 1,scales = "free_y")+xlab("Year")+ylab("")
ggplot(gasCars4,aes(factor(year),com08))+geom_boxplot()+facet_wrap(~trany2,ncol = 1)+theme(axis.title.x = element_text(angle = 45))+labs(x="year",y="MPG")
#六、根据五中排量与MPG在2006年左右的矛盾关系，查看是否自动挡或者手动挡比四缸发动机更加高效
gasCars4<-subset(gasCars,cylinders=="4")
ggplot(gasCars4,aes(factor(year),com08))+geom_boxplot()+facet_wrap(~trany2,ncol = 1)+theme(axis.title.x = element_text(angle = 45))+labs(x="year",y="MPG")
ggplot(gasCars4,aes(factor(year),comb08))+geom_boxplot()+facet_wrap(~trany2,ncol = 1)+theme(axis.title.x = element_text(angle = 45))+labs(x="year",y="MPG")
ggplot(gasCars4,aes(factor(year),comb08))+geom_boxplot()+facet_wrap(~trany2,ncol = 1)+theme(axis.title.x = element_text(angle = 45))+labs(x="year",y="MPG")
#七、查看每一年手动挡的车占比情况
ggplot(gasCars4,aes(factor(year),fill=factor(trany2)))+geom_bar(position = "fill")+labs(x="Year",y="Proportion of cars",fill="Transmission")+theme(yintercept=0.5,lintype=2)
+labs(x="Year",y="Proportion of cars",fill="Transmission")+theme(axis.text.x = element_text(angle = 45))+geom_hline(yintercept=0.5,lintype=2)
ggplot(gasCars4,aes(factor(year),fill=factor(trany2)))+geom_bar(position = "fill")
+labs(x="Year",y="Proportion of cars",fill="Transmission")+theme(axis.text.x = element_text(angle = 45))+geom_hline(yintercept=0.5,lintype=2)
#八、查看汽车生产厂商随年份的变化
carsMakes<-ddply(gasCars,~year,summarise,numberofMakers=length(unique(make)))
carsMakes
ggplot(carsMakes,aes(year,numberofMakers))+geom_point()
ggplot(carsMakes,aes(year,numberofMakers))+geom_point()+labs(x="Year",y="Number of makers")+ggtitle("Four cylinder Cars")
#九、每年制造的汽车燃油效率如何
carsCommonMakes4<-subset(gasCars4,make %in% commonMakes)
uniqueMakes<-dlply(gasCars4,~year,function(x),unique(x$make))
uniqueMakes<-dlply(gasCars4,~year,function(x) unique(x$make))
uniqueMakes
commonMakes<-Reduce(intersect,uniqueMakes)
commonMakes
uniqueMakes<-dlply(gasCars4,~year,function(x) unique(x$make))
commonMakes<-Reduce(intersect,uniqueMakes)
commonMakes
#九、每年制造的汽车燃油效率如何
carsCommonMakes4<-subset(gasCars4,make %in% commonMakes)
carsCommonMakes4
#这里按照两个变量进行分组统计，所以分为了
avgMpg_commonMakers<-ddply(carsCommonMakes4,~year+make,summarise,avg_MPG=mean(comb08))
ggplot(avgMpg_commonMakers,aes(year,avgMpg))+geom_line()+facet_wrap(~make,ncol=3)
ggplot(avgMpg_commonMakers,aes(year,avgMPG))+geom_line()+facet_wrap(~make,ncol=3)
avgMpg_commonMakers
ggplot(avgMpg_commonMakers,aes(year,avg_MPG))+geom_line()+facet_wrap(~make,ncol=3)
