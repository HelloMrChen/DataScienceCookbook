x1=rnom(4);x2=c(3:6)
x1=rnorm(4);x2=c(3:6)
a=data.frame('长度'=x1,'宽度'=x2) #数据框内的两个向量必须是相同行数
plot(a)
x1=rnorm(15);x2=rnorm(15)
a=data.frame('长度'=x1,'宽度'=x2) #数据框内的两个向量必须是相同行数
plot(a)
#R语言读剪切板中的内容
x=read.table("clipboard",header = T)
x
x
#R语言读剪切板中的内容
y=read.table("clipboard",header = T)
y=read.table("clipboard",header = T) #拷贝剪切板，并拷贝表头
for (i in 1:59) {
a[i]=i
i=i+2
}
a
for (i in 1:59) {
a[i]=i*2+3
i=i+2
}
a
for (i in 1:59) {
b[i]=i*2+3
i=i+2
}
b
while (i<10) {
print(i)
}
print(i)
i=1
while (i<10) {
print(i)
}
i=1
while (i<10) {
print(i)
i=i+1
}
i=1
while (i<=10) {
print(i)
i=i+1
}
#综合性的例子，模拟产生统计专业同学的名单，记录数学分析，线性代数、概率统计三科成绩，
#然后进行一些统计分析
num=seq(10378001,10378100)
num
x3[which(x3>100)]=100
x3
x1=round(runif(100,80,100)) #round 默认小数位位0，runif产生均匀分布的随机数
x2=round(rnorm(100,mean = 80,sd=7))#产生100个平均值为80，标准差为7的100个正态分布数
x3=round(rnorm(100,mean = 83,sd = 13))
x3[which(x3>100)]=100
x3
x=data.frame(num,x1,x2,x3)
x
#计算平均值  means(),colmeans()
colMeans(x)
#计算平均值  means(),colmeans()
means(x);colMeans(x)
#计算平均值  means(),colmeans()
Mxeans(x);colMeans(x)
#计算平均值  means(),colmeans()
Means(x);colMeans(x)
#计算平均值  means(),colmeans()
mean(x);colMeans(x)
x=data.frame(num,x1,x2,x3)
mode(x)
is.matrix(x)
is.data.frame(x)
colMeans(x)[x("x1","x2")]
colMeans(x)[c("x1","x2")]
colMeans(x)[c("x1","x2","x3")]
apply(x,2,mean)
apply(x[c("x1","x2","x3")])
apply(x[c("x1","x2","x3")],2,mean)
#数据框、矩阵、向量的数据查看方式
matrix(1:16,nrow = 4,ncol=4)
m[c(1,2)]
m[1,2]
m=matrix(1:16,nrow = 4,ncol=4)
m[1,2]
dataframe=x
dataframe
dataframe[c("x1","x2")]
x1[1]
x1[1:4]
m[1,]
m[1,];m[1,2]
apply(x[c("x1","x2","x3")],2,sum)
#计算每个人的总分
apply(x[c("x1","x2","x3")],1,sum)
x=data.frame(num,x1,x2,x3,sumScore)
#计算每个人的总分
sumScore=apply(x[c("x1","x2","x3")],1,sum)
x=data.frame(num,x1,x2,x3,sumScore)
x
#总分最高的同学
which.max(x["sumScore"])
#总分最高的同学
which.max(x[c("sumScore"))
#总分最高的同学
which.max(x[c("sumScore")])
x[c("sumScore")]
#总分最高的同学
which.max(x[c("sumScore")])
#总分最高的同学
which.max(apply(x, 2, sum))
which.max(apply(x, 2, sum))
x=data.frame(num,x1,x2,x3,sumScore)
x
#总分最高的同学
which.max(apply(x, 1, sum))
#总分最高的同学
x$num[which.max(apply(x, 1, sum))]
x[which(x$num=10378089)]
x[which(x$num=10378089)]
x[which(x$num=10378089)]
x[which(x$num=10378089)]
x[which(x$num==10378089)]
x[1]
x[2]
x[1:4]
which(x$num=10378089)
#总分最高的同学
x$num[which.max(apply(x, 1, sum))]
#总分最高的同学
x[which.max(apply(x, 1, sum))]
#总分最高的同学
x$num[which.max(apply(x, 1, sum))]
hist(x$x1)
hist(x$x2)
hist(x)
plot(x$x1,x$x2)
table(x)
table(x$x1)
table(x$x1)
barplot(table(x$x1))
pie(table(x$x1))
boxplot(x)
boxplot(x$x1)
boxplot(x$x1,x$x2)
boxplot(x$x1,x$x2，x$x3)
boxplot(x$x1,x$x2,x$x3)
boxplot(x$x1,x$x2,x$x3,col = c("rec","green","blue")) #箱线图   上线下线分别为最大值和最小值  箱子上下分别为25%分位数和25%分位数
boxplot(x$x1,x$x2,x$x3,col = c("red","green","blue")) #箱线图   上线下线分别为最大值和最小值  箱子上下分别为25%分位数和25%分位数
boxplot(x$x1,x$x2,x$x3,col = c("red","green","blue"),horizontal = T) #箱线图   上线下线分别为最大值和最小值  箱子上下分别为25%分位数和25%分位数
#星象图
stars(x$x1)
#星象图
stars(x[c("x1","x2","x3")])
#星象图
stars(x[c("x1","x2","x3")],full = T )
#星象图
stars(x[c("x1","x2","x3")],full = T )
#星象图
stars(x[c("x1","x2","x3")],full = T ,draw.segments = T)
#星象图
stars(x[c("x1","x2","x3")],full = F ,draw.segments = T)
#星象图
stars(x[c("x1","x2","x3")],full = T ,draw.segments = T)
stars(x[c("x1","x2","x3")])
stars(x[c("x1","x2","x3")],full = T ,draw.segments = T) #雷达图
#茎叶图
stem(x$x1)
x1=round(runif(100,80,100)) #round 默认小数位位0，runif产生均匀分布的随机数
x2=round(rnorm(100,mean = 80,sd=7))#产生100个平均值为80，标准差为7的100个正态分布数
x3=round(rnorm(100,mean = 83,sd = 13)) #正态分布随机数中是没有上下限的
x3[which(x3>100)]=100  #异常值的处理
x=data.frame(num,x1,x2,x3)
stem(x$x1)
#茎叶图
stem(x$x2)
qqnorm(x$x1)
qqnorm(x$x2)
qqline(x$x2)
#散点图的进阶
plot(x$x1,x$x2,main = "数学和线性代数的关系")
#散点图的进阶
plot(x$x1,x$x2,main = "数学和线性代数的关系",xlab = "数学分析",ylab = "线性代数")
#散点图的进阶
plot(x$x1,x$x2,main = "数学和线性代数的关系",xlab = "数学分析",ylab = "线性代数",
xlim = c(1:100),ylim = c(1:100)
)
#散点图的进阶
plot(x$x1,x$x2,main = "数学和线性代数的关系",xlab = "数学分析",ylab = "线性代数",
xlim = c(1,100),ylim = c(1,100)
)
#散点图的进阶
plot(x$x1,x$x2,main = "数学和线性代数的关系",xlab = "数学分析",ylab = "线性代数",
xlim = c(50,100),ylim = c(50,100)
)
#散点图的进阶
plot(x$x1,x$x2,main = "数学和线性代数的关系",xlab = "数学分析",ylab = "线性代数",
xlim = c(50,100),ylim = c(50,100),
col="red "
)
#散点图的进阶
plot(x$x1,x$x2,main = "数学和线性代数的关系",xlab = "数学分析",ylab = "线性代数",
xlim = c(50,100),ylim = c(50,100),
col="red",pch=19
)
#散点图的进阶
plot(x$x1,x$x2,main = "数学和线性代数的关系",xlab = "数学分析",ylab = "线性代数",
xlim = c(50,100),ylim = c(50,100),
xaxs="i",yaxs="i",
col="red",pch=19
)
#散点图的进阶
plot(x$x1,x$x2,main = "数学和线性代数的关系",xlab = "数学分析",ylab = "线性代数",
xlim = c(50,100),ylim = c(50,100),
xaxs="i",yaxs="i",
col="red",pch=18
)
data()
heatmap(as.matrix(mtcars))
heatmap(as.matrix(mtcars),Rowv = na)
heatmap(as.matrix(mtcars),Rowv = NA)
heatmap(as.matrix(mtcars),Rowv = NA,Colv = NA)
heatmap(as.matrix(mtcars),Rowv = NA,Colv = NA,col=heat.colors(256)
heatmap(as.matrix(mtcars),Rowv = NA,Colv = NA,col=heat.colors(256))
heatmap(as.matrix(mtcars),Rowv = NA,Colv = NA,col=heat.colors(256))
heatmap(as.matrix(mtcars),Rowv = NA,Colv = NA,col=heat.colors(256),scale = "column")
heatmap(as.matrix(mtcars),Rowv = NA,Colv = NA,col=heat.colors(256),scale = "column",margins = c(2,8))
heatmap(as.matrix(mtcars),Rowv = NA,Colv = NA,col=heat.colors(256),scale = "column",
margins = c(2,8)，mian="cars")
heatmap(as.matrix(mtcars),Rowv = NA,Colv = NA,col=heat.colors(256),scale = "column",
margins = c(2,8),mian="cars")
heatmap(as.matrix(mtcars),Rowv = NA,Colv = NA,col=heat.colors(256),scale = "column",
margins = c(2,8),main="cars")
iris[,3:4]
iris
iris[,3:4]
iris
#向日葵散点图
sunflowerplot(iris[,3:4],col = "gold")
#向日葵散点图
sunflowerplot(iris[,3:4])
sunflowerplot(iris[,3:4])
#向日葵散点图
sunflowerplot(iris[,3:4],col = "gold",seg.col = "gold")
#向日葵散点图
sunflowerplot(iris[3:4],col = "gold",seg.col = "gold") #对数据集的
iris[3:4]
#散点图集
plot(iris[,1:4])
#散点图集
plot(iris[1:4])
#散点图集
plot(iris[1:4]);pairs(iris[1:4])
plot(iris[1:4],pch=19,col="blue")
plot(iris[1:4],pch=19,col="blue",cex=0.9)
sunflowerplot(iris[1:4],col = "gold",seg.col = "gold") #对数据集的第三列和第四列画图，重叠的部分用延伸的线来表示
plot(iris[1:4],pch=19,col="blue",cex=0.9);pairs(iris[1:4])
plot(iris[1:4],pch=19,col="blue",cex=0.9);
#par 函数将作图区域分割
par(mflow=c(3:1))
#par 函数将作图区域分割
par(mfrow=c(3:1))
#par 函数将作图区域分割
par(mfrow=c(3,1))
plot(iris[1:4],pch=19,col="blue",cex=0.9);pairs(iris[1:4])
#par 函数将作图区域分割
par(mfrow=c(3,1))
plot(iris[1:4],pch=19,col="blue",cex=0.9);pairs(iris[1:4])
plot(x1,x2)
plot(x1,x2);plot(x2,x3)
plot(x1,x2);plot(x2,x3);plot(x1,x3)
plot(x1,x2,main = "1");plot(x2,x3,main = "1");plot(x1,x3,main = "1")
plot(x1,x2,main = "1");plot(x2,x3,main = "2");plot(x1,x3,main = "2")
plot(x1,x2,main = "1");plot(x2,x3,main = "2");plot(x1,x3,main = "3")
color()
colors()
dev()
dev.cur()
dev.new()
scatterplot3d(x[2:4])
install.packages("scatterplot3d")
scatterplot3d(x[2:4])
library(scatterplot3d)
#地图
Map("state",interior=fasle)
#地图
map("state",interior=fasle)
install.packages("maps")
library(maps)
map("state",interior=fasle)
map("state",interior=FALSE)
map("state",interior=FALSE,col = "red ")
map("world",interior=FALSE,col = "red ")
map("world",interior=FALSE,col = "red ")
map("state",interior=FALSE,col = "red ")
map("china",interior=FALSE,col = "red ")
map("world",interior=FALSE,col = "red ")
map("world")
map("states")
map("state")
li=iris
li
cor(li[1],li[2])
plot(li[1],li[2])
plot(li[2],li[3])
li
li[1];li[2]
plot(li[1],li[2])
li=iris(which(iris$Species=="setosa"),1:2)
li=iris[which(iris$Species=="setosa"),1:2]
li
plot(li)
#相关系数
cor(li)
#相关系数
cor(li[1],li[2])
#相关系数显著性检验
cor.test(li[1],li[2])
li[1]
#相关系数显著性检验
cor.test(li$Sepal.Length,li$Sepal.Width)
li$Sepal.Length
is.vector(li$Sepal.Length)
is.vector(li[1])
mode(li[1])
mode(li$Sepal.Length)
swiss
views(swiss)
view(swiss)
View(swiss)
s=lm(Ftertility~.,data = swiss)
s=lm(Fertility~.,data = swiss)
s
summary(s)
heat.colors(5)
install.packages("RColorBrewer")
library(RColorBrewer)
display.brewer.all()
brewer.pal(7,"RlOrRd")
brewer.pal(7,"YlOrRd")
display.brewer.pal(7,"YlOrRd")
par(bg="gray")
plot(norm(100))
plot(rnorm(100))
box(which = "plot")
box(which = "figure")
box(which = "Outer")
box(which = "Figure")
box(which = "figure")
x=rnorm(100)
shapiro.test(x)   看p值，如果太小则显著就不拒绝原假设，原假设为不符合正态分布
shapiro.test(x)   #看p值，如果太小则显著就不拒绝原假设，原假设为不符合正态分布
#正态性检验
x=rnorm(1000)
shapiro.test(x)   #看p值，如果太小则显著就不拒绝原假设，原假设为不符合正态分布
#正态性检验
x=rnorm(100000)
shapiro.test(x)   #看p值，如果太小则显著就不拒绝原假设，原假设为不符合正态分布
#正态性检验
x=rnorm(5000)
shapiro.test(x)   #看p值，如果太小则显著就不拒绝原假设，原假设为不符合正态分布
install.packages("lattice")
library(lattice)
xyplot(mpg~disp)
xyplot(mpg~disp,data=mtcars)
xyplot(mpg~disp,data=mtcars,groups = cyl)
xyplot(mpg~disp,data=mtcars,groups = cyl,auto.key = list(corner=c(1,1)))
#ggplot 包是R语言中强大的画图包
library(ggplot2)
qplot(mpg,disp,data=mtcars)
qplot(mpg,disp,data=mtcars,col=as.factor(cyl))
qplot(mpg,disp,data=mtcars,size=as.factor(cyl))
qplot(mpg,disp,data=mtcars,size=as.factor(cyl),col=as.factor(mpg)
qplot(mpg,disp,data=mtcars,size=as.factor(cyl),col=as.factor(mpg))
qplot(mpg,disp,data=mtcars,size=as.factor(cyl),col=as.factor(cyl))
qplot(mpg,disp,data=mtcars,size=as.factor(cyl),col=as.factor(mpg))
#plot中的text()可以在plot图上进行标识文字
plot(mpg~disp,data=mtcars)
text(255,35,"nihao")
text(255,100,"nihao")
text(255,100,"nihao")
text(258,22,"nihao")
text(mtcars$mpg,mtcars$disp,"nihao")  #text函数跟line、point一样是低水平的作图工具
text(mtcars$mpg,mtcars$disp,"nihao")  #text函数跟line、point一样是低水平的作图工具
#plot中的text()可以在plot图上进行标识文字
plot(mpg~disp,data=mtcars)
text(mtcars$mpg,mtcars$disp,"nihao")  #text函数跟line、point一样是低水平的作图工具
text(mtcars$mpg,mtcars$disp,mtcars$carb)  #text函数跟line、point一样是低水平的作图工具
#arrows函数用来画出误差条
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,x1=mtcars$disp)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,x1=mtcars$disp,y1=mtcars$disp*0.95)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,x1=mtcars$disp,y1=mtcars$mpg*0.95)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,x1=mtcars$disp,y1=mtcars$mpg*0.95,angle = 90,code=3)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,x1=mtcars$disp,y1=mtcars$mpg*0.95,angle = 90,code=3,length = 0.04)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,x1=mtcars$disp,y1=mtcars$mpg*0.95,angle = 90,code=3,length = 0.04,lwd = 0.4)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,
x1=mtcars$disp,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.04,lwd = 0.4)
#arrows函数用来画出误差条
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,
x1=mtcars$disp,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.04,lwd = 0.4)
#arrows函数用来画出误差条
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,
x1=mtcars$disp,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.04,lwd = 0.4)
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$disp*0.95,
x1=mtcars$disp,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.04,lwd = 0.4)
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$mpg*0.95,
x1=mtcars$disp,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.04,lwd = 0.4)
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$mpg*0.95,
x1=mtcars$disp*0.5,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.04,lwd = 0.4)
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$mpg*0.95,
x1=mtcars$disp*0.95,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.04,lwd = 0.4)
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$mpg*0.95,
x1=mtcars$disp,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.04,lwd = 0.4)
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$mpg*0.95,
x1=mtcars$disp*0.95,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.0
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$mpg*0.95,
x1=mtcars$disp*0.95,y1=mtcars$mpg*1.05,angle = 90,code=3,length = 0.04,lwd = 0.4)
plot(mpg~disp,data = mtcars)
arrows(x0=mtcars$disp,y0=mtcars$mpg*0.95,
x1=mtcars$disp*0.95,y1=mtcars$mpg*1.05,angle = 30,code=3,length = 0.04,lwd = 0.4)
qplot(mpg,disp,data=mtcars,col=as.factor(cyl))
qplot(mpg,disp,data=mtcars,size=as.factor(cyl),col=as.factor(mpg))
xyplot(mpg~disp,data=mtcars,groups = cyl,auto.key = list(corner=c(1,1)))
plot(mpg~disp,data=mtcars)
text(mtcars$mpg,mtcars$disp,mtcars$carb)  #text函数跟line、point一样是低水平的作图工具 通过这种方法可以将数据
x=rnorm(100)
x
plot(x,y)
y=rnorm(100)
plot(x,y)
x=rnorm(10000)
y=rnorm(10000)
plot(x,y)
plot(x,y)
x=rnorm(10000,col=2)
smoothScatter(x,y)
install.packages("plyr")
library(plyr)
install.packages("ggplot2")
install.packages("reshape2")
library(ggplot2)
library(reshape2)
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
install.packages("installr")
require(installr)#load/install + load installr
updateR()
install.packages("installr")
source('~/我的文档/MBA养成记/2-自我提升/2-数据分析/程序练习/数据科学实战手册/R-01-carDataVisualization/carDataVisualization.r', echo=TRUE)
c<-c(1:10)
a<-c(1:10)
b<-c('a','b','c')
c=data.frame(a,b)
a<-c(1:3)
c=data.frame(a,b)
c
table(c)
b<-c('a','c','b')
c=data.frame(a,b)
c
table(c)
a<-c(1,2,3,3)
b<-c('a','c','b','b')
c=data.frame(a,b)
c
table(c)
c<-factor('男','女','男','男')
typeof(c)
mode(c)
c<-factor(c('男','女','男','男'))
mode(c)
class(c)
levels(c)
nlevels(sex)
nlevels(c)
data<-data.frame(Name = c("苹果","谷歌","脸书","亚马逊","腾讯"),Company = c("Apple","Google","Facebook","Amozon","Tencent"),Sale2013 = c(5000,3500,2300,2100,3100),Sale2014 = c(5050,3800,2900,2500,3300),Sale2015 = c(5050,4000,3200,2800,3700),Sale2016 = c(6000,4800,4500,3500,4300))
data
kable(data)
install.packages("knitr")
library(knitr)
kable(data)
View(data)
mydata<-melt(data,id.vars=c("Name","Company"),variable.name="Year",value.name="Sale")
install.packages("reshape2")
library(reshape2)
mydata<-melt(data,id.vars=c("Name","Company"),variable.name="Year",value.name="Sale")
View(mydata)
mydata<-melt(data,id.vars=c("Name","Company"),variable.name="Year",value.name="Sale")
data<-data.frame(Name = c("苹果","谷歌","脸书","亚马逊","腾讯"),Company = c("Apple","Google","Facebook","Amozon","Tencent"),Sale2013 = c(5000,3500,2300,2100,3100),Sale2014 = c(5050,3800,2900,2500,3300),Sale2015 = c(5050,4000,3200,2800,3700),Sale2016 = c(6000,4800,4500,3500,4300))
kable(data)
help("melt")
mydata<-melt(data,id.vars=c("Name","Company"),variable.name="Year",value.name="Sale")
mydata
mydata<-melt(data,id.vars=c("Name","Company"),value.name="Year",variable.name="Sale")
mydata
kable(data)
mydata<-melt(data,id.vars=c("Name","Company"),variable.name=="Year",value.name="Sale")
mydata<-melt(data,id.vars=c("Name","Company"),variable.name="Year",value.name="Sale")
mydata
